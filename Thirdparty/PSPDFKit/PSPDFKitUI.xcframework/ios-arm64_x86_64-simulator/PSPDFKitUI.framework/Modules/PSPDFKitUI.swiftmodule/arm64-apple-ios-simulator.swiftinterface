// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PSPDFKitUI
import Combine
import Foundation
import PSPDFKit
@_exported import PSPDFKitUI
import Swift
import SwiftUI
import UIKit
@available(iOS 13.0, *)
extension PDFView {
  public enum ActionEvent {
    case search(sender: Swift.AnyObject?, text: Swift.String? = nil, options: [PSPDFKitUI.PresentationOption : Any]? = nil, animated: Swift.Bool = true)
    case showOutline(sender: Swift.AnyObject?)
    case setViewMode(viewMode: PSPDFKitUI.ViewMode, animated: Swift.Bool = true)
    case setAnnotationMode(showAnnotationMode: Swift.Bool, animated: Swift.Bool = true)
    case setPageIndex(index: PSPDFKit.PageIndex, animated: Swift.Bool = true)
    case scrollToNextSpread(animated: Swift.Bool = true)
    case scrollToPreviousSpread(animated: Swift.Bool = true)
    case reloadPage(index: PSPDFKit.PageIndex, animated: Swift.Bool = true)
    case reloadData
    case executeAction(action: PSPDFKit.Action, targetRect: CoreGraphics.CGRect, pageIndex: PSPDFKit.PageIndex, animated: Swift.Bool = true, actionContainer: Any? = nil)
    case setUserInterfaceVisible(show: Swift.Bool, animated: Swift.Bool = true)
  }
}
@available(iOS 13.0, *)
public struct PDFView : SwiftUI.View {
  public var document: SwiftUI.ObservedObject<PSPDFKit.Document>?
  public init(document: SwiftUI.ObservedObject<PSPDFKit.Document>? = nil, pageIndex: SwiftUI.Binding<PSPDFKit.PageIndex>? = nil, viewMode: SwiftUI.Binding<PSPDFKitUI.ViewMode>? = nil, selectedAnnotations: SwiftUI.Binding<[PSPDFKit.Annotation]>? = nil, actionEventPublisher: Combine.PassthroughSubject<PSPDFKitUI.PDFView.ActionEvent, Swift.Never>? = nil, configuration: PSPDFKitUI.PDFConfiguration? = nil)
  public init(document: SwiftUI.ObservedObject<PSPDFKit.Document>? = nil, pageIndex: SwiftUI.Binding<PSPDFKit.PageIndex>? = nil, viewMode: SwiftUI.Binding<PSPDFKitUI.ViewMode>? = nil, selectedAnnotations: SwiftUI.Binding<[PSPDFKit.Annotation]>? = nil, actionEventPublisher: Combine.PassthroughSubject<PSPDFKitUI.PDFView.ActionEvent, Swift.Never>? = nil, configurationBuilder: @escaping (PSPDFKitUI.PDFConfigurationBuilder) -> Swift.Void)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10PSPDFKitUI7PDFViewV4bodyQrvp", 0) ðŸ¦¸
}
extension UIGestureRecognizer {
  public func require<T>(toFail component: PSPDFKitUI.InteractionComponent<T>) where T : AnyObject
}
@available(iOS 13.0, *)
extension PDFView {
  public func onWillBeginDisplayingPageView(perform action: @escaping (PSPDFKitUI.PDFPageView, Swift.Int) -> Swift.Void) -> PSPDFKitUI.PDFView
  public func onDidEndDisplayingPageView(perform action: @escaping (PSPDFKitUI.PDFPageView, Swift.Int) -> Swift.Void) -> PSPDFKitUI.PDFView
  public func onShouldShowMenuItemsForSelectedText(perform action: @escaping (PSPDFKitUI.PDFPageView, [PSPDFKitUI.MenuItem], Swift.String) -> [PSPDFKitUI.MenuItem]) -> PSPDFKitUI.PDFView
  public func onShouldShowMenuItemsForSelectedImage(perform action: @escaping (PSPDFKitUI.PDFPageView, [PSPDFKitUI.MenuItem], PSPDFKit.ImageInfo) -> [PSPDFKitUI.MenuItem]) -> PSPDFKitUI.PDFView
  public func onShouldShowMenuItemsForSelectedAnnotations(perform action: @escaping (PSPDFKitUI.PDFPageView, [PSPDFKitUI.MenuItem], [PSPDFKit.Annotation]?) -> [PSPDFKitUI.MenuItem]) -> PSPDFKitUI.PDFView
  public func onDidTapOnAnnotation(perform action: @escaping (PSPDFKitUI.PDFPageView, PSPDFKit.Annotation) -> Swift.Bool) -> PSPDFKitUI.PDFView
  public func onShouldSelectAnnotations(perform action: @escaping (PSPDFKitUI.PDFPageView, [PSPDFKit.Annotation]) -> [PSPDFKit.Annotation]) -> PSPDFKitUI.PDFView
}
@available(*, deprecated, renamed: "SpeechController.Option.autoDetectLanguage", message: "Deprecated in PSPDFKit 9.4 for iOS.")
public let PSPDFSpeechSynthesizerAutoDetectLanguage: PSPDFKitUI.SpeechController.Option
@available(*, deprecated, renamed: "SpeechController.Option.language", message: "Deprecated in PSPDFKit 9.4 for iOS and.")
public let PSPDFSpeechSynthesizerLanguageKey: PSPDFKitUI.SpeechController.Option
@available(*, deprecated, renamed: "SpeechController.Option.languageHint", message: "Deprecated in PSPDFKit 9.4 for iOS.")
public let PSPDFSpeechSynthesizerLanguageHintKey: PSPDFKitUI.SpeechController.Option
extension PDFViewController {
  convenience public init(document: PSPDFKit.Document?, delegate: PSPDFKitUI.PDFViewControllerDelegate? = nil, configurationBuilder builder: ((PSPDFKitUI.PDFConfigurationBuilder) -> Swift.Void) = { _ in })
}
@available(iOS 13.0, *)
extension PDFViewController {
  public struct PageIndexChangeEvent {
    public let pageIndex: PSPDFKit.PageIndex
    public let oldPageIndex: PSPDFKit.PageIndex
    public let reason: PSPDFKitUI.PDFViewController.PageIndexChangeEvent.Reason
    @frozen public enum Reason {
      case programmatically
      case userInterface
      public static func == (a: PSPDFKitUI.PDFViewController.PageIndexChangeEvent.Reason, b: PSPDFKitUI.PDFViewController.PageIndexChangeEvent.Reason) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
  }
  public var pageIndexPublisher: Combine.AnyPublisher<PSPDFKitUI.PDFViewController.PageIndexChangeEvent, Swift.Never> {
    get
  }
  public var documentPublisher: Combine.AnyPublisher<PSPDFKit.Document, Swift.Never> {
    get
  }
}
extension DrawView {
  public var pointSequences: [[PSPDFKit.DrawingPoint]] {
    get
  }
}
@available(iOS 13.0, *)
extension PDFView {
  public func updateConfiguration(builder builderBlock: @escaping (PSPDFKitUI.PDFConfigurationBuilder) -> Swift.Void) -> PSPDFKitUI.PDFView
  public func updateControllerConfiguration(block: @escaping (PSPDFKitUI.PDFViewController) -> Swift.Void) -> PSPDFKitUI.PDFView
}
@available(iOS 13.0, *)
extension PDFView {
  public func pageMode(_ pageMode: PSPDFKitUI.PageMode) -> PSPDFKitUI.PDFView
  public func pageTransition(_ pageTransition: PSPDFKitUI.PageTransition) -> PSPDFKitUI.PDFView
  public func firstPageAlwaysSingle(_ firstPageAlwaysSingle: Swift.Bool) -> PSPDFKitUI.PDFView
  public func spreadFitting(_ spreadFitting: PSPDFKitUI.PDFConfiguration.SpreadFitting) -> PSPDFKitUI.PDFView
  public func backgroundColor(_ backgroundColor: UIKit.UIColor) -> PSPDFKitUI.PDFView
  public func scrollDirection(_ scrollDirection: PSPDFKitUI.ScrollDirection) -> PSPDFKitUI.PDFView
  public func minimumZoomScale(_ minimumZoomScale: Swift.Float) -> PSPDFKitUI.PDFView
  public func maximumZoomScale(_ maximumZoomScale: Swift.Float) -> PSPDFKitUI.PDFView
  public func linkAction(_ linkAction: PSPDFKitUI.LinkAction) -> PSPDFKitUI.PDFView
  public func allowedMenuActions(_ allowedMenuActions: PSPDFKitUI.TextSelectionMenuAction) -> PSPDFKitUI.PDFView
  public func textSelectionEnabled(_ textSelectionEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func imageSelectionEnabled(_ imageSelectionEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func editableAnnotationTypes(_ editableAnnotationTypes: Swift.Set<PSPDFKit.Annotation.Tool>) -> PSPDFKitUI.PDFView
  public func userInterfaceViewMode(_ userInterfaceViewMode: PSPDFKitUI.UserInterfaceViewMode) -> PSPDFKitUI.PDFView
  public func pageLabelEnabled(_ pageLabelEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func documentLabelEnabled(_ documentLabelEnabled: PSPDFKitUI.AdaptiveConditional) -> PSPDFKitUI.PDFView
  public func shouldHideUserInterfaceOnPageChange(_ shouldHideUserInterfaceOnPageChange: Swift.Bool) -> PSPDFKitUI.PDFView
  public func pageGrabberEnabled(_ pageGrabberEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func shouldHideStatusBarWithUserInterface(_ shouldHideStatusBarWithUserInterface: Swift.Bool) -> PSPDFKitUI.PDFView
  public func shouldShowRedactionInfoButton(_ shouldShowRedactionInfoButton: Swift.Bool) -> PSPDFKitUI.PDFView
  public func redactionUsageHintEnabled(_ redactionUsageHintEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func showBackActionButton(_ showBackActionButton: Swift.Bool) -> PSPDFKitUI.PDFView
  public func showForwardActionButton(_ showForwardActionButton: Swift.Bool) -> PSPDFKitUI.PDFView
  public func showBackForwardActionButtonLabels(_ showBackForwardActionButtonLabels: Swift.Bool) -> PSPDFKitUI.PDFView
  public func thumbnailBarMode(_ thumbnailBarMode: PSPDFKitUI.ThumbnailBarMode) -> PSPDFKitUI.PDFView
  public func scrubberBarType(_ scrubberBarType: PSPDFKitUI.ScrubberBarType) -> PSPDFKitUI.PDFView
  public func shouldAskForAnnotationUsername(_ shouldAskForAnnotationUsername: Swift.Bool) -> PSPDFKitUI.PDFView
  public func autosaveEnabled(_ autosaveEnabled: Swift.Bool) -> PSPDFKitUI.PDFView
  public func useParentNavigationBar(_ useParentNavigationBar: Swift.Bool) -> PSPDFKitUI.PDFView
}
@available(iOS 13.0, *)
extension PSPDFKitUI.PDFViewController.PageIndexChangeEvent.Reason : Swift.Equatable {}
@available(iOS 13.0, *)
extension PSPDFKitUI.PDFViewController.PageIndexChangeEvent.Reason : Swift.Hashable {}
